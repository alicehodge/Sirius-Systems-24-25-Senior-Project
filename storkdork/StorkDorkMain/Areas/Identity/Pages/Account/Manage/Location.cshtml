@page
@model StorkDork.Areas.Identity.Pages.Account.Manage.LocationModel
@{
    ViewData["Title"] = "Set Your Location";
    ViewData["ActivePage"] = ManageNavPages.Location;
    var formStyle = Model.HasLocation ? "display:none;" : "";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5>@ViewData["Title"]</h5>
                </div>
                <div class="card-body">
                    <partial name="_StatusMessage" for="StatusMessage" />
                    
                    @if (Model.HasLocation)
                    {
                        <div class="current-location mb-4">
                            <h6>Your Current Location:</h6>
                            <p class="text-muted">@Model.CurrentLocation</p>
                            <button id="edit-location-btn" class="btn btn-sm btn-outline-primary me-2">
                                Edit Location
                            </button>
                            <button type="button" id="remove-location-btn" 
                                    class="btn btn-sm btn-outline-danger">
                                Remove Location
                            </button>
                        </div>
                    }
                    
                    <form method="post" id="location-form" style="@formStyle">
                        <div class="mb-3">
                            <label class="form-label">Search for a location:</label>
                            <div class="search-container position-relative">
                                <input asp-for="Input.Location" id="location-search" 
                                       class="form-control" autocomplete="off"
                                       placeholder="Enter city, region, or address" />
                                <div id="search-spinner" class="position-absolute end-0 top-0 mt-2 me-3" 
                                     style="display: none;">
                                    <div class="spinner-border spinner-border-sm" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                                <div id="suggestions" class="list-group mt-1" style="display:none;"></div>
                            </div>
                            <span asp-validation-for="Input.Location" class="text-danger"></span>
                        </div>
                        
                        <div class="d-flex justify-content-between">
                            <button type="submit" class="btn btn-primary">
                                @(Model.HasLocation ? "Update Location" : "Save Location")
                            </button>
                            @if (Model.HasLocation)
                            {
                                <button type="button" id="cancel-edit" class="btn btn-outline-secondary">
                                    Cancel
                                </button>
                            }
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // DOM elements
        const searchInput = document.getElementById('location-search');
        const suggestionsDiv = document.getElementById('suggestions');
        const searchSpinner = document.getElementById('search-spinner');
        let currentPage = 1;
        let isLoading = false;
        let hasMoreResults = true;

        // Edit location toggle
        const editBtn = document.getElementById('edit-location-btn');
        const removeBtn = document.getElementById('remove-location-btn');
        const cancelBtn = document.getElementById('cancel-edit');
        const locationForm = document.getElementById('location-form');
        const currentLocationDiv = document.querySelector('.current-location');

        if (editBtn && locationForm) {
            editBtn.addEventListener('click', () => {
                locationForm.style.display = 'block';
                currentLocationDiv.style.display = 'none';
                searchInput.focus();
            });
        }

        if (cancelBtn && locationForm && currentLocationDiv) {
            cancelBtn.addEventListener('click', () => {
                locationForm.style.display = 'none';
                currentLocationDiv.style.display = 'block';
            });
        }

        // Remove location
        if (removeBtn) {
            removeBtn.addEventListener('click', async () => {
                if (confirm('Are you sure you want to remove your saved location?')) {
                    const response = await fetch('?handler=RemoveLocation', {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });
                    
                    if (response.ok) {
                        window.location.reload();
                    }
                }
            });
        }

        // Debounce function for search
        function debounce(func, timeout = 300) {
            let timer;
            return (...args) => {
                clearTimeout(timer);
                timer = setTimeout(() => { func.apply(this, args); }, timeout);
            };
        }

        // Improved location search with pagination
        const searchLocations = debounce(async (query, page = 1) => {
            if (query.length < 3 || isLoading || !hasMoreResults) return;
            
            isLoading = true;
            searchSpinner.style.display = 'block';
            
            try {
                const response = await fetch(
                    `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(query)}` +
                    `&format=json&limit=10&page=${page}&addressdetails=1`,
                    {
                        headers: {
                            'User-Agent': 'YourAppName/1.0 (your@email.com)'
                        }
                    }
                );
                
                const results = await response.json();
                hasMoreResults = results.length === 10;
                
                if (page === 1) {
                    suggestionsDiv.innerHTML = '';
                }
                
                if (results.length > 0) {
                    results.forEach(result => {
                        const item = document.createElement('button');
                        item.type = 'button';
                        item.className = 'list-group-item list-group-item-action';
                        item.innerHTML = `
                            <div class="fw-bold">${result.display_name.split(',')[0]}</div>
                            <small class="text-muted">${result.display_name.split(',').slice(1).join(',').trim()}</small>
                        `;
                        item.addEventListener('click', () => {
                            searchInput.value = result.display_name;
                            suggestionsDiv.style.display = 'none';
                        });
                        suggestionsDiv.appendChild(item);
                    });
                    
                    suggestionsDiv.style.display = 'block';
                } else if (page === 1) {
                    suggestionsDiv.innerHTML = '<div class="list-group-item">No results found</div>';
                    suggestionsDiv.style.display = 'block';
                }
                
                currentPage = page;
            } catch (error) {
                console.error('Error fetching locations:', error);
                suggestionsDiv.innerHTML = '<div class="list-group-item text-danger">Error loading results</div>';
                suggestionsDiv.style.display = 'block';
            } finally {
                isLoading = false;
                searchSpinner.style.display = 'none';
            }
        });

        // Event listeners
        searchInput.addEventListener('input', (e) => {
            currentPage = 1;
            hasMoreResults = true;
            searchLocations(e.target.value, 1);
        });

        // Infinite scroll for suggestions
        suggestionsDiv.addEventListener('scroll', () => {
            if (suggestionsDiv.scrollTop + suggestionsDiv.clientHeight >= suggestionsDiv.scrollHeight - 20) {
                if (!isLoading && hasMoreResults && searchInput.value.length >= 3) {
                    searchLocations(searchInput.value, currentPage + 1);
                }
            }
        });

        // Close suggestions when clicking outside
        document.addEventListener('click', (e) => {
            if (!searchInput.contains(e.target) && !suggestionsDiv.contains(e.target)) {
                suggestionsDiv.style.display = 'none';
            }
        });

        // Initialize form if validation errors exist
        if (document.querySelector('.validation-summary-errors')) {
            if (locationForm) locationForm.style.display = 'block';
            if (currentLocationDiv) currentLocationDiv.style.display = 'none';
        }
    </script>
}