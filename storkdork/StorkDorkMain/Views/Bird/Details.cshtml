@using StorkDorkMain.Models
@model StorkDorkMain.Models.BirdDetailsViewModel

<div class="container mt-4">
    <!-- First row: Bird info (photos + taxonomy + range) -->
    <div class="row mb-5">
        <!-- Photos column -->
        <div class="col-md-4">
            <div class="card"> 
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4>Photos</h4>
                    @if (User.Identity.IsAuthenticated)
                    {
                    <button class="btn btn-outline-primary btn-sm" type="button" 
                        data-bs-toggle="collapse" data-bs-target="#photoSubmissionForm">
                        Submit Photo
                    </button>
                    }
                </div>
                <div class="card-body">
                    @if (Model.Bird.Photos == null || !Model.Bird.Photos.Any())
                    {
                    <img src="@Model.ImageUrl" alt="@Model.Bird.CommonName" 
                         class="img-fluid rounded w-100" />
                    }
                    else
                    {
                    <div id="birdPhotos" class="carousel slide" data-bs-ride="carousel">
                        <div class="carousel-inner">
                        @foreach (var photo in Model.Bird.Photos)
                        {
                            <div class="carousel-item @(Model.Bird.Photos.First() == photo ? "active" : "")">
                            <img src="data:@photo.PhotoContentType;base64,@Convert.ToBase64String(photo.PhotoData)" class="d-block w-100" 
                                 alt="@Model.Bird.CommonName">
                            </div>
                        }
                        </div>
                        @if (Model.Bird.Photos.Count() > 1)
                        {
                        <button class="carousel-control-prev" type="button" 
                            data-bs-target="#birdPhotos" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon"></span>
                        </button>
                        <button class="carousel-control-next" type="button" 
                            data-bs-target="#birdPhotos" data-bs-slide="next">
                            <span class="carousel-control-next-icon"></span>
                        </button>
                        }
                    </div>
                    }
                    
                    @if (User.Identity.IsAuthenticated)
                    {
                        <div class="collapse mt-3" id="photoSubmissionForm">
                            <div class="border-top pt-3">
                                <partial name="_PhotoSubmissionForm" 
                                    model='new BirdPhotoSubmissionViewModel { BirdId = Model.Bird.Id }' />
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Bird info column -->
        <div class="col-md-8">
            <h1>@Model.Bird.CommonName</h1>
            <h3><em>@Model.Bird.ScientificName</em></h3>
            
            <div class="card mt-3">
                <div class="card-header">
                    <h4>Taxonomy</h4>
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-3">Order</dt>
                        <dd class="col-sm-9">
                            <a href="@Url.Action("Order", "Taxonomy", new { order = Model.Bird.Order })">@Model.Bird.Order</a>
                        </dd>
                        
                        <dt class="col-sm-3">Family</dt>
                        <dd class="col-sm-9">
                            <a href="@Url.Action("Family", "Taxonomy", new { family = Model.Bird.FamilyScientificName })">
                                @Model.Bird.FamilyCommonName (@Model.Bird.FamilyScientificName)
                            </a>
                        </dd>
                    </dl>
                </div>
            </div>

            <!-- Range info and submission form -->
            <div class="card mt-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4>Range</h4>
                    @if (User.Identity.IsAuthenticated)
                    {
                        <button class="btn btn-outline-primary btn-sm" type="button" 
                                data-bs-toggle="collapse" data-bs-target="#rangeSubmissionForm">
                            Submit Range Information
                        </button>
                    }
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.Bird.Range))
                    {
                        <p>@Model.Bird.Range</p>
                    }
                    else
                    {
                        <p class="text-muted">No range information available for this bird yet. 
                            @if (!User.Identity.IsAuthenticated)
                            {
                                <span>Please <a asp-area="Identity" asp-page="/Account/Login">log in</a> to submit range information.</span>
                            }
                        </p>
                    }

                    @if (User.Identity.IsAuthenticated)
                    {
                        <div class="collapse" id="rangeSubmissionForm">
                            <div class="border-top pt-3">
                                <partial name="_RangeSubmissionForm" model='new RangeSubmissionViewModel { BirdId = Model.Bird.Id }' />
                            </div>
                        </div>
                    }
                </div>
            </div>
            
            <!-- Add to Bird Log Button -->
            <div class="mt-3">
                <a href="@Url.Action("Create", "BirdLog", new { commonName = Model.Bird.CommonName })" class="btn btn-success">
                    Log as a Bird Sighting
                </a>
                <button class="btn btn-primary" id="addToChecklistBtn" data-bird-id="@Model.Bird.Id">
                    Add to Checklist
                </button>
            </div>
        </div>
    </div>

    <!-- Second row: Map and related birds with more visual separation -->
    <div class="row mt-4">
        <!-- Sightings map column -->
        <div class="col-md-6">
            <div class="card h-100">
                <div class="card-header bg-light">
                    <h4>Recent Sightings</h4>
                </div>
                <div class="card-body">
                    <div id="map" style="height: 400px;" class="rounded"></div>
                    <div id="sightingInfo" class="mt-2"></div>
                </div>
            </div>
        </div>

        <!-- Related birds column -->
        <div class="col-md-6">
            @if (Model.RelatedBirds != null)
            {
                <div class="card h-100">
                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                        <h4>Related Birds</h4>
                        <div class="dropdown">
                            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                Filter by Type: @(Model.CategoryFilter?.ToUpper() ?? "ALL")
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item @(Model.CategoryFilter == null ? "active" : "")" 
                                      href="@Url.Action("Details", new { id = Model.Bird.Id })">All</a></li>
                                @foreach (var category in BirdDetailsViewModel.Categories)
                                {
                                    <li><a class="dropdown-item @(Model.CategoryFilter == category ? "active" : "")" 
                                          href="@Url.Action("Details", new { id = Model.Bird.Id, categoryFilter = category })">
                                        @category.ToUpper()
                                    </a></li>
                                }
                            </ul>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (Model.RelatedBirds.Any())
                        {
                            <div class="list-group">
                                @foreach (var relatedBird in Model.RelatedBirds)
                                {
                                    <a href="@Url.Action("Details", new { id = relatedBird.Bird.Id })" 
                                       class="list-group-item list-group-item-action">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <strong>@relatedBird.Bird.CommonName</strong>
                                                <br />
                                                <small class="text-muted">@relatedBird.Bird.ScientificName</small>
                                            </div>
                                            <span class="badge bg-secondary">
                                                @relatedBird.GetRelationType()
                                            </span>
                                        </div>
                                    </a>
                                }
                            </div>
                            
                            @if (Model.TotalPages > 1)
                            {
                                <nav aria-label="Related birds pages" class="mt-3">
                                    <ul class="pagination justify-content-center">
                                        @for (int i = 1; i <= Model.TotalPages; i++)
                                        {
                                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                                <a class="page-link" href="@Url.Action("Details", new { id = Model.Bird.Id, categoryFilter = Model.CategoryFilter, page = i })">
                                                    @i
                                                </a>
                                            </li>
                                        }
                                    </ul>
                                </nav>
                            }
                        }
                        else
                        {
                            <div class="alert alert-info">
                                @if (Model.CategoryFilter != null)
                                {
                                    <p>No related birds found in category '@Model.CategoryFilter.ToUpper()'. 
                                       <a href="@Url.Action("Details", new { id = Model.Bird.Id })">View all related birds</a>
                                    </p>
                                }
                                else
                                {
                                    <p>No related birds found for this species.</p>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<div class="modal fade" id="checklistModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add <span id="birdName"></span> to Checklist</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="checklistForm">
                <div class="modal-body">
                    <input type="hidden" id="selectedBirdId" />
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="checklistOption" 
                                   id="existingChecklist" value="existing" checked>
                            <label class="form-check-label" for="existingChecklist">
                                Add to existing checklist
                            </label>
                        </div>
                        <select class="form-select mt-2" id="existingChecklists" 
                                aria-label="Select checklist" required>
                            <option value="">Loading checklists...</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="checklistOption" 
                                   id="newChecklist" value="new">
                            <label class="form-check-label" for="newChecklist">
                                Create new checklist
                            </label>
                        </div>
                        <input type="text" class="form-control mt-2" id="newChecklistName" 
                               placeholder="Enter checklist name" disabled required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    
    <script>
        let map;
        let markers = [];
        const DEFAULT_LAT = 44.8485; // Monmouth, OR
        const DEFAULT_LNG = -123.2340;

        document.addEventListener('DOMContentLoaded', function() {
            initializeMap();
            setupGeolocation();
            fetchNearestSightings();
        });

        function initializeMap() {
            map = L.map('map').setView([DEFAULT_LAT, DEFAULT_LNG], 13);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);
        }

        function setupGeolocation() {
            if ("geolocation" in navigator) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    map.setView([position.coords.latitude, position.coords.longitude], 13);
                    fetchNearestSightings(position.coords.latitude, position.coords.longitude);
                }, function(error) {
                    fetchNearestSightings(DEFAULT_LAT, DEFAULT_LNG);
                });
            } else {
                fetchNearestSightings(DEFAULT_LAT, DEFAULT_LNG);
            }
        }

        async function fetchNearestSightings(lat = DEFAULT_LAT, lng = DEFAULT_LNG) {
            try {
                const response = await fetch(`/api/map/GetNearestSightings?birdId=@Model.Bird.Id&lat=${lat}&lng=${lng}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch sightings');
                }
                const sightings = await response.json();
                displaySightings(sightings);
            } catch (error) {
                console.error('Error fetching sightings:', error);
                document.getElementById('sightingInfo').innerHTML = 
                    '<div class="alert alert-info">No recent sightings found nearby.</div>';
            }
        }

        function displaySightings(sightings) {
            clearMarkers();
            const bounds = L.latLngBounds();

            sightings.forEach(sighting => {
                if (sighting.latitude && sighting.longitude && 
                    !isNaN(parseFloat(sighting.latitude)) && 
                    !isNaN(parseFloat(sighting.longitude))) {
                    
                    const lat = parseFloat(sighting.latitude);
                    const lng = parseFloat(sighting.longitude);
                    
                    try {
                        const marker = L.marker([lat, lng])
                            .bindPopup(createPopupContent(sighting))
                            .addTo(map);
                        
                        markers.push(marker);
                        bounds.extend([lat, lng]);
                    } catch (error) {
                        console.error('Error creating marker:', error, sighting);
                    }
                }
            });

            if (markers.length > 0) {
                map.fitBounds(bounds, { padding: [50, 50] });
                updateSightingInfo(sightings);
            } else {
                document.getElementById('sightingInfo').innerHTML = 
                    '<div class="alert alert-info">No valid sighting locations found nearby.</div>';
            }
        }

        function createPopupContent(sighting) {
            const sightingDate = sighting.date ? new Date(sighting.date).toLocaleDateString() : 'Unknown Date';
            const locationInfo = sighting.notes?.split(',')[1]?.replace('Location:', '').trim() || 'Unknown Location';
            const birdCount = sighting.notes ? parseInt(sighting.notes.split(',')[0].replace('Count:', '')) || 0 : 0;
            return `
                <div>
                    <h6>${'@Model.Bird.CommonName' || 'Unknown Bird'}</h6>
                    <p>Date: ${sightingDate}</p>
                    <p>Location: ${locationInfo}</p>
                    <p>Count: ${birdCount}</p>
                </div>
            `;
        }

        function updateSightingInfo(sightings) {
            const infoDiv = document.getElementById('sightingInfo');
            if (sightings.length === 0) {
                infoDiv.innerHTML = '<div class="alert alert-info">No recent sightings found nearby.</div>';
            } else {
                infoDiv.innerHTML = `<div class="alert alert-success">Found ${sightings.length} recent sightings nearby.</div>`;
            }
        }

        function clearMarkers() {
            markers.forEach(marker => marker.remove());
            markers = [];
        }
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const addBtn = document.getElementById('addToChecklistBtn');
            const modal = new bootstrap.Modal('#checklistModal');
            const birdNameSpan = document.getElementById('birdName');
            const selectedBirdId = document.getElementById('selectedBirdId');
            const existingChecklists = document.getElementById('existingChecklists');
            
            // When Add to Checklist button is clicked
            addBtn.addEventListener('click', function() {
                const birdId = this.dataset.birdId;
                selectedBirdId.value = birdId;
                birdNameSpan.textContent = '@Model.Bird.CommonName';
                
                // Load checklists
                fetch('/Checklists/GetUserChecklists')
                    .then(response => response.json())
                    .then(data => {
                        existingChecklists.innerHTML = '';
                        if (data.length === 0) {
                            existingChecklists.innerHTML = '<option value="">No checklists found</option>';
                            document.querySelector('#existingChecklist').disabled = true;
                            document.querySelector('#newChecklist').checked = true;
                            toggleChecklistFields();
                        } else {
                            data.forEach(c => {
                                const option = document.createElement('option');
                                option.value = c.id;
                                option.textContent = c.name;
                                existingChecklists.appendChild(option);
                            });
                        }
                    });
                
                modal.show();
            });

            // Handle radio button changes
            document.querySelectorAll('input[name="checklistOption"]').forEach(radio => {
                radio.addEventListener('change', toggleChecklistFields);
            });

            function toggleChecklistFields() {
                const isNew = document.getElementById('newChecklist').checked;
                existingChecklists.disabled = isNew;
                newChecklistName.disabled = !isNew;
                if (isNew) {
                    existingChecklists.removeAttribute('required');
                    newChecklistName.setAttribute('required', '');
                } else {
                    newChecklistName.removeAttribute('required');
                    existingChecklists.setAttribute('required', '');
                }
            }

            // Handle form submission
            document.getElementById('checklistForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const formData = new FormData();
                formData.append('birdId', selectedBirdId.value);
                
                if (document.getElementById('existingChecklist').checked) {
                    formData.append('checklistId', existingChecklists.value);
                } else {
                    formData.append('checklistName', newChecklistName.value);
                }

                fetch('/Checklists/AddBirdToChecklist', {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => Promise.reject(err));
                    }
                    return response.json();
                })
                .then(data => {
                    modal.hide();
                    // Show success message - you can use a toast or alert
                    alert(data.message);
                })
                .catch(error => {
                    alert(error.message || 'An error occurred');
                });
            });
        });
    </script>
}